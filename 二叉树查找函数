template<class T>
T* BST<T>::search(BSTNode<T>*p,const &T el) const{
    while(p!=0)
    {
        if(el==p->el)
        {
            return &p->el;
        }
        else if(el<p->el)
        {
            p=p->left;
        }
        else
        {
            p=p->right;
        }
    }
    return 0;
}

template<class T>
void BST<T>::insert(const T& el)
{
    BSTNode<T> *p=root,*prev=0;
    while(p!=0)
    {
        prev=p;
        if(el<p->el)
        {
            p=p->left;
        }
        else
        {
            p=p->right;
        }
    }
    if(root==0)
    {
        root=new BSTNode<T>(el);
    }
    else if(el<prev->el)
    {
        prev->left=new BSTNode<T>(el);
    }
    else
    {
        prev->right=new BSTNode<T>(el);
    }
}
